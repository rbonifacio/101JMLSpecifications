/*
 * Test Oracle Class for org.softlang.model.Department
 * For Use With JML4 RAC
 *
 * Generated by JMLUnitNG 1.3 (103), 2012-08-21 11:42 -0300.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

package org.softlang.model;


import java.io.PrintWriter;
import java.util.ArrayList;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.jml4.rac.runtime.JMLAssertionError;
import org.jmlspecs.jml4.rac.runtime.JMLChecker;
import org.jmlspecs.jml4.rac.runtime.JMLEntryPreconditionError;
import org.jmlspecs.jml4.rac.runtime.JMLEvaluationError;

import org.softlang.model.Department_JML_Data.*;


/**
 * Test oracles generated by JMLUnitNG for JML4 RAC of class
 * org.softlang.model.Department.
 * 
 * @author JMLUnitNG 1.3 (103)
 * @version 2012-08-21 11:42 -0300
 */

public class Department_JML_Test {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class<?>[] classes = {Department_JML_Test.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList<XmlSuite>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }

  /** 
   * A test to ensure that RAC is enabled before running other tests.
   */
  @Test
  public void test_racEnabled() {
    Assert.assertTrue
    (JMLChecker.isRACCompiled(org.softlang.model.Department.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 

  /**
   * A test for method getName.
   *
   * @param the_test_object The Department to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getName__0
  (final org.softlang.model.Department the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getName();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addEmployee.
   *
   * @param the_test_object The Department to call the test method on.
   * @param employee The Employee to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addEmployee__Employee_employee__19")
  public void test_addEmployee__Employee_employee__19
  (final org.softlang.model.Department the_test_object, 
   final org.softlang.model.Employee employee) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addEmployee(employee);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getManager.
   *
   * @param the_test_object The Department to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getManager__0
  (final org.softlang.model.Department the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getManager();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for a constructor.
   *
   * @param pname The String to be passed.
   * @param pmanager The Employee to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_Department__String_pname__Employee_pmanager__29")
  public void test_Department__String_pname__Employee_pmanager__29
  (final java.lang.String pname, final org.softlang.model.Employee pmanager) {
    try {
      new org.softlang.model.Department(pname, pmanager);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method setManager.
   *
   * @param the_test_object The Department to call the test method on.
   * @param pmanager The Employee to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_setManager__Employee_pmanager__19")
  public void test_setManager__Employee_pmanager__19
  (final org.softlang.model.Department the_test_object, 
   final org.softlang.model.Employee pmanager) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.setManager(pmanager);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addDept.
   *
   * @param the_test_object The Department to call the test method on.
   * @param department The Department to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addDept__Department_department__19")
  public void test_addDept__Department_department__19
  (final org.softlang.model.Department the_test_object, 
   final org.softlang.model.Department department) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addDept(department);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method setName.
   *
   * @param the_test_object The Department to call the test method on.
   * @param pname The String to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_setName__String_pname__10")
  public void test_setName__String_pname__10
  (final org.softlang.model.Department the_test_object, 
   final java.lang.String pname) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.setName(pname);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getSubdepts.
   *
   * @param the_test_object The Department to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getSubdepts__0
  (final org.softlang.model.Department the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getSubdepts();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for a constructor.
   *
   */
  @Test(dependsOnMethods = { "test_racEnabled" })
  public void test_Department__0
  () {
    try {
      new org.softlang.model.Department();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method total.
   *
   * @param the_test_object The Department to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_total__0
  (final org.softlang.model.Department the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.total();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method cut.
   *
   * @param the_test_object The Department to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_cut__0
  (final org.softlang.model.Department the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.cut();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getEmployees.
   *
   * @param the_test_object The Department to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getEmployees__0
  (final org.softlang.model.Department the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getEmployees();
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * Data provider for method void addEmployee(Employee).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addEmployee__Employee_employee__19", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addEmployee__Employee_employee__19() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (Department_InstanceStrategy.class,
          addEmployee__Employee_employee__19__employee.class));
  }



  /**
   * Data provider for constructor Department(String, Employee).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_Department__String_pname__Employee_pmanager__29", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_Department__String_pname__Employee_pmanager__29() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (Department__String_pname__Employee_pmanager__29__pname.class,
          Department__String_pname__Employee_pmanager__29__pmanager.class));
  }


  /**
   * Data provider for method void setManager(Employee).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_setManager__Employee_pmanager__19", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_setManager__Employee_pmanager__19() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (Department_InstanceStrategy.class,
          setManager__Employee_pmanager__19__pmanager.class));
  }


  /**
   * Data provider for method void addDept(Department).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addDept__Department_department__19", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addDept__Department_department__19() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (Department_InstanceStrategy.class,
          addDept__Department_department__19__department.class));
  }


  /**
   * Data provider for method void setName(String).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_setName__String_pname__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_setName__String_pname__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (Department_InstanceStrategy.class,
          setName__String_pname__10__pname.class));
  }







  /**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_instance_only", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_instance_only() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator(Department_InstanceStrategy.class));
  }
}